{"id":"Ktnl","dependencies":[{"name":"/home/phoenix/Desktop/Projects/CargoDB/package.json","includedInParent":true,"mtime":1588524815884},{"name":"/home/phoenix/Desktop/Projects/CargoDB/node_modules/nanoid/package.json","includedInParent":true,"mtime":1586516094699}],"generated":{"js":"module.exports=function(t,e,r){for(var l=(2<<31-Math.clz32(e.length-1|1))-1,n=Math.ceil(1.6*l*r/e.length),h=\"\";;)for(var o=t(n),a=n;a--;)if((h+=e[o[a]&l]||\"\").length===+r)return h};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/nanoid/format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/nanoid/format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":7}},{"source":"../node_modules/nanoid/format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/nanoid/format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":24}},{"source":"../node_modules/nanoid/format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":26}},{"source":"../node_modules/nanoid/format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":28}},{"source":"../node_modules/nanoid/format.js","original":{"line":49,"column":0},"generated":{"line":1,"column":31}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":35}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":39}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":42}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":45}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":48}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":53}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":59}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":61}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":68}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":70}},{"source":"../node_modules/nanoid/format.js","original":{"line":34,"column":0},"generated":{"line":1,"column":74}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":76}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":78}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":83}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":88}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":92}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":96}},{"source":"../node_modules/nanoid/format.js","original":{"line":46,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/nanoid/format.js","original":{"line":47,"column":0},"generated":{"line":1,"column":106}},{"source":"../node_modules/nanoid/format.js","original":{"line":47,"column":0},"generated":{"line":1,"column":108}},{"source":"../node_modules/nanoid/format.js","original":{"line":53,"column":0},"generated":{"line":1,"column":113}},{"source":"../node_modules/nanoid/format.js","original":{"line":50,"column":0},"generated":{"line":1,"column":117}},{"source":"../node_modules/nanoid/format.js","original":{"line":50,"column":0},"generated":{"line":1,"column":121}},{"source":"../node_modules/nanoid/format.js","original":{"line":50,"column":0},"generated":{"line":1,"column":123}},{"source":"../node_modules/nanoid/format.js","original":{"line":50,"column":0},"generated":{"line":1,"column":125}},{"source":"../node_modules/nanoid/format.js","original":{"line":52,"column":0},"generated":{"line":1,"column":128}},{"source":"../node_modules/nanoid/format.js","original":{"line":52,"column":0},"generated":{"line":1,"column":130}},{"source":"../node_modules/nanoid/format.js","original":{"line":53,"column":0},"generated":{"line":1,"column":132}},{"source":"../node_modules/nanoid/format.js","original":{"line":58,"column":0},"generated":{"line":1,"column":137}},{"source":"../node_modules/nanoid/format.js","original":{"line":56,"column":0},"generated":{"line":1,"column":141}},{"source":"../node_modules/nanoid/format.js","original":{"line":56,"column":0},"generated":{"line":1,"column":144}},{"source":"../node_modules/nanoid/format.js","original":{"line":56,"column":0},"generated":{"line":1,"column":146}},{"source":"../node_modules/nanoid/format.js","original":{"line":56,"column":0},"generated":{"line":1,"column":148}},{"source":"../node_modules/nanoid/format.js","original":{"line":56,"column":0},"generated":{"line":1,"column":151}},{"source":"../node_modules/nanoid/format.js","original":{"line":56,"column":0},"generated":{"line":1,"column":155}},{"source":"../node_modules/nanoid/format.js","original":{"line":58,"column":0},"generated":{"line":1,"column":159}},{"source":"../node_modules/nanoid/format.js","original":{"line":58,"column":0},"generated":{"line":1,"column":169}},{"source":"../node_modules/nanoid/format.js","original":{"line":58,"column":0},"generated":{"line":1,"column":171}},{"source":"../node_modules/nanoid/format.js","original":{"line":58,"column":0},"generated":{"line":1,"column":178}}],"sources":{"../node_modules/nanoid/format.js":"/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n  // We canâ€™t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  var mask = (2 << 31 - Math.clz32((alphabet.length - 1) | 1)) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */\n"},"lineCount":null}},"error":null,"hash":"c0d6cc0ecdc0ad9fbbeb0f71fa9a000e","cacheData":{"env":{}}}