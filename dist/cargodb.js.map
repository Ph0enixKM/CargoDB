{"version":3,"sources":["async.ts","collection.ts","helper.ts","cargo.ts"],"names":[],"mappings":"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","file":"cargodb.js","sourceRoot":"../src","sourcesContent":["// It's a virtual representation\n// of a cargo operation method\ninterface CargoOperation {\n    args: Array<any>\n    method: string\n    callback: Function\n}\n\n// Async base for extending \n// classes of an async behavior\n\nexport default class AsyncNature {\n\n    private busy: boolean\n    private queue: Array<CargoOperation>\n\n    constructor(context: Object) {\n        this.queue = []\n        this.busy = false\n        this.context = context ?? this\n    }\n\n    // Run until all of\n    // of the operations\n    // are finished\n    private async asyncLoop() {\n        // If there is what to iter\n        // get yourself to work\n        if (this.queue.length) \n            this.busy = true\n        // Loop'n'run all the ops in queue\n        while (this.busy) {\n            // If done - headphones off and tada\n            if (!this.queue.length) {\n                this.busy = false\n            }\n            // If stil something to do\n            // roll up your sleeves\n            else {\n                const {method, args, callback} = this.queue[0]\n                callback(this.context[method](...args))\n                this.queue.shift()\n            }\n        }\n    }\n\n    // Add operation and\n    // trigger the loop\n    private async(action: string, args: Array<any>) {\n        return new Promise(res => {\n            // Add a cargo operation to queue\n            this.queue.push( <CargoOperation> {\n                args: args,\n                method: action,\n                callback(...val) { res(...val) }\n            })\n            // Trigger loop\n            if (!this.busy) {\n                this.asyncLoop()\n            }\n        })\n    }\n\n}\n","import fs from 'fs'\nimport path from 'path'\nimport shortid from 'shortid'\nimport AsyncNature from './async'\n\nclass Collection extends AsyncNature {\n    constructor(loc: string, name: string, rusty: Function) {\n        super(this)\n        // Set global variables\n        this.path = loc\n        this.name = name\n        this.rusty = rusty\n        // If ship does not\n        // exist then create one\n        if (!fs.existsSync(loc)) {\n            fs.mkdirSync(loc)\n        }\n    }\n\n    // Add a cargo file\n    // to the ship and\n    // return generated ID\n    public addCargo(cargo: Object): string {\n        if (cargo.ID != null) {\n            throw `\n                Cannot add an element with \n                existing ID field (${cargo.ID})\n            `\n        }\n        const genID = shortid.generate()\n            // Location of the future cargo file\n        const loc = path.join(this.path, genID + '.cargo')\n\n        // what if such file exists and screwed screwed the job\n        // This won't happen tho (99.99% of the time)\n        if (fs.existsSync(loc)) {\n            genID = shortid.generate()\n        }\n\n        // Set the ID to the cargo\n        cargo.ID = genID\n            // Create a JSON out of the given cargo\n        const json = JSON.stringify(cargo)\n\n        // Save Cargo file\n        fs.writeFileSync(loc, json)\n        return genID\n    }\n\n    // Get a cargo file\n    // from the ship \n    // by id\n    public getCargo(id: string): Object | null {\n        let isValid = shortid.isValid(id)\n        if (!isValid) {\n            throw `Given ID is invalid (${id})`\n        }\n        // Location to the desired cargo\n        const loc = path.join(this.path, id + '.cargo')\n            // If such cargo does not exist\n        if (!fs.existsSync(loc)) {\n            console.error(`CargoDB couldn't find such cargo id: ${id}`)\n            return null\n        }\n        // Read JSON carefully\n        try {\n            return JSON.parse(fs.readFileSync(loc, 'utf-8'))\n        }\n        // What if it fails to read?\n        catch (err) {\n            const rusty = path.join(this.path, id + '.rusty.cargo')\n            // If there is rusty cargo handler\n            // notify user otherwise\n            this.rusty(path.join(this.dir, id))\n            // Do the rename\n            fs.renameSync(loc, rusty)\n            return null\n        }\n    }\n\n    // filter the cargos\n    // that you need\n    public findCargos(callback: (cargo: Object) => boolean): Array<Object> {\n        const matches = []\n        let files = fs.readdirSync(this.path)\n            // Iterate over files\n        for (let i = 0; i < files.length; i++) {\n            const loc = path.join(this.path, files[i])\n            const raw = fs.readFileSync(loc, 'utf-8')\n                // Read JSON and be careful\n            try {\n                const obj = JSON.parse(raw)\n                if (callback(obj)) {\n                    matches.push(obj)\n                }\n            }\n            // What if it fails to read?\n            catch (err) {\n                // Only if JSON failes to parse\n                if (err instanceof SyntaxError) {\n                    // Get only name of the file\n                    const name = path.basename(files[i], path.extname(files[i]))\n                    const rusty = path.join(this.path, name + '.rusty.cargo')\n                    // If there is rusty cargo handler\n                    // notify user otherwise\n                    this.rusty(path.join(this.dir, id))\n                    // Do the rename\n                    fs.renameSync(loc, rusty)\n                }\n            }\n        }\n        return matches\n    }\n\n    // Set an existing cargo file\n    // to a certain cargo\n    public setCargo(id: string, cargo: Object): string | null {\n        let isValid = shortid.isValid(id)\n        if (!isValid) {\n            throw `Given ID is invalid (${id})`\n        }\n        // Location to the desired cargo\n        const loc = path.join(this.path, id + '.cargo')\n            // If such cargo does not exist\n        if (!fs.existsSync(loc)) {\n            console.error(`CargoDB couldn't find such cargo id: ${id}`)\n            return null\n        }\n        // Write JSON cargo\n        cargo.ID = id\n        const json = JSON.stringify(cargo)\n            // Save cargo\n        fs.writeFileSync(loc, json)\n        return id\n    }\n\n    // Update given fields\n    // (fields with\n    // undefined values\n    // will be removed)\n    public updateCargo(id: string, cargo: Object): string | null {\n        let isValid = shortid.isValid(id)\n        if (!isValid) {\n            throw `Given ID is invalid (${id})`\n        }\n        // Location to the desired cargo\n        const loc = path.join(this.path, id + '.cargo')\n            // If such cargo does not exist\n        if (!fs.existsSync(loc)) {\n            console.error(`CargoDB couldn't find such cargo id: ${id}`)\n            return null\n        }\n        // Read JSON carefully\n        try {\n            let obj = JSON.parse(fs.readFileSync(loc, 'utf-8'))\n                // Update values\n            for (const item in cargo) {\n                if (item == 'ID') continue\n                    // Update item\n                obj[item] = cargo[item]\n                    // Remove if it's supposed to be undefined\n                if (cargo[item] === undefined) {\n                    delete obj[item]\n                }\n            }\n            const json = JSON.stringify(obj)\n            fs.writeFileSync(loc, json)\n            return id\n        }\n        // What if it fails to read?\n        catch (err) {\n            // Only if JSON failes to parse\n            if (err instanceof SyntaxError) {\n                const rusty = path.join(this.path, id + '.rusty.cargo')\n                // If there is rusty cargo handler\n                // notify user otherwise\n                this.rusty(path.join(this.dir, id))\n                // Do the rename\n                fs.renameSync(loc, rusty)\n                return null\n            }\n        }\n    }\n\n    // Remove the cargo\n    // from collection\n    public removeCargo(id: string): string | null {\n        let isValid = shortid.isValid(id)\n        if (!isValid) {\n            throw `Given ID is invalid (${id})`\n        }\n        // Location to the desired cargo\n        const loc = path.join(this.path, id + '.cargo')\n        // If such cargo does not exist\n        if (!fs.existsSync(loc)) {\n            console.error(`CargoDB couldn't find such cargo id: ${id}`)\n            return null\n        }\n        fs.unlinkSync(loc)\n        return id\n    }\n}\n\n\n// Async wrapper \n// for Cargo's Collection.\n// Don't write any logic here\n// async wrapper's purpose is to\n// handle the code that needs to\n// be done asynchronously\n\nclass CollectionAsync extends Collection {\n\n    // Collection constructor\n    constructor(loc: string, name: string, rusty: Function) {\n        super(loc, name, rusty)\n    }\n\n    // Expose methods in a \n    // simple to use API\n\n    // [Async] It's is used to\n    // add cargo to the collection.\n    // The object can be any type\n    // or should follow a schema\n    // defined optionally in\n    // collection constructor\n    public add(cargo: Object): string {\n        return super.async('addCargo', [cargo])\n    }\n\n    // [Sync] It retrieves\n    // desired cargo by it's id.\n    // If one doesn't exits\n    // a null value is\n    // being returned\n    public get(id: string): Object | null {\n        return super.getCargo(id)\n    }\n\n    // [Sync] It seeks for\n    // cargos that match\n    // given criteria resolved\n    // in a callback function.\n    // It always returns an array\n    // even if nothing was found\n    public find(callback: (cargo: Object) => boolean): Array<Object> {\n        return super.findCargos(callback)\n    }\n\n    // [Async] it searches\n    // cargo of given ID and\n    // overwrites it's contents.\n    // If the cargo doesn't exist\n    // returns null value\n    public set(id: string, cargo: Object): string | null {\n        return super.async('setCargo', [id, cargo])\n    }\n\n    // [Async] It commits\n    // a mutation on a cargo\n    // ruled by cargo object\n    // config. In another words\n    // merges the old cargo with\n    // the new data model\n    public update(id: string, cargo: Object): string | null {\n        return super.async('updateCargo', [id, cargo])\n    }\n\n    // [Async] It removes\n    // a cargo that is found\n    // by ID. As always - null\n    // value indicates that \n    // the cargo wasn't found\n    public remove(id: string): string | null {\n        return super.async('removeCargo', [id])\n    }\n}\n\nexport default CollectionAsync","import path from 'path'\nimport fs from 'fs'\n\n/*\n    Helper functions module\n*/\n\nfunction textFormat(content: string) {\n    return content.replace(/\\s+/g, ' ').trim()\n}\n\n// Create Base Folder\nfunction createBase(ctx: any): boolean {\n    let loc = path.join(ctx.dir, ctx.name)\n    if (!fs.existsSync(loc)) {\n        fs.mkdir(loc, err => {\n            if (err) throw 'CargoDB: ' + err\n        })\n    }\n}\n\n// Check whether passed string\n// resembles a name\nfunction validateName(name: string): boolean {\n    const reg = /^[A-Za-z0-9@$\\-#%&_()\\[\\]{}]+$/\n    const res = reg.test(name)\n    if (res && name.length) {\n        return true\n    }\n    return false\n}\n\nexport default {\n    createBase,\n    validateName,\n    textFormat\n}","import fs from 'fs'\nimport path from 'path'\nimport shortid from 'shortid'\nimport Collection from './collection'\nimport AsyncNature from './async'\nimport schema from './schema'\nimport help from './helper'\n\n// Main Cargo idea.\n// All user ready-to-use \n// methods put here.\n\nclass Cargo extends AsyncNature {\n\n    public rusty: Function\n    public name: string\n    public dir: string\n    public schemas: Object\n\n    constructor(name: string, dir: string) {\n        super(this)\n        // Get path relative to the directory\n        if (dir && dir[0] === '~') {\n            dir = path.join(process.env.PWD, dir.slice(1))\n        }\n        // Provide a storage name 'string'\n        this.name = name || (() => { throw 'No storage name provided' })()\n        // Provide storage's location (optional) 'string'\n        this.dir = dir || process.env.PWD\n        // Create Base Folder Storage\n        help.createBase(this)\n        // Generate a better charset\n        shortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#$')\n        // Set default behavior for rusty containers\n        this.rusty = (location) => {\n            const name = path.basename(location)\n            console.error(help.textFormat(`\n                CargoDB stumbled upon a corrupted .cargo file.\n                In order to keep functioning the file is being renamed to\n                '${name}.rusty.cargo'.\n            `))\n        }\n        // Create variable to store all schemas\n        this.schemas = {}\n    }\n\n    // Whenever rusty container is found\n    // Run this callback with the path\n    public onRusty(cb: (path: string) => void) {\n        this.rusty = cb\n    }\n\n\n    // Set Item Method\n    // storage : String\n    // item : Any\n    public setCargo(storage: string, item: any): boolean {\n        // Location to the cargo file\n        const loc = path.join(\n            this.dir, this.name, storage + '.cargo'\n        )\n\n        // Validate if given name is correct\n        if (!help.validateName(storage)) {\n            throw `\n          Given name '${storage}' does not apply \n          to proper key name pattern\n          (RegExp: /^[A-Za-z0-9@$\\-#%&_()\\[\\]{}]+$/)\n        `\n        }\n\n        // Create container if does not exist\n        if (!fs.existsSync(loc)) {\n            fs.writeFileSync(loc, '{}')\n        }\n\n        // Get the already existing file\n        let objectContainer = fs.readFileSync(loc, 'utf-8')\n\n        // If it's a new file\n        if (objectContainer == null) {\n            fs.writeFileSync(loc, JSON.stringify({\n                [storage]: item\n            }))\n        }\n\n        // if the file actually exists \n        // to just \"append\" the data\n        else {\n            try {\n                // Try to parse JSON inside of the file\n                objectContainer = JSON.parse(objectContainer)\n                objectContainer[storage] = item\n                fs.writeFileSync(loc, JSON.stringify(objectContainer))\n            }\n            // if the data is corrupted\n            catch (err) {\n                // Location to the rusty cargo file\n                const rusty = path.join(\n                    this.dir, this.name, storage + '.rusty.cargo'\n                )\n                // If there is rusty cargo handler\n                // notify user otherwise\n                this.rusty(path.join(this.dir, this.name, storage))\n                // Do the rename\n                fs.renameSync(loc, rusty)\n                // Save the value anyways\n                fs.writeFileSync(loc, JSON.stringify({ [storage]: item }))\n                return false\n            }\n\n        }\n        return true\n    }\n\n\n    // Get Item Method\n    // storage : String\n    public getCargo(storage: string): any {\n        // Location to the cargo file\n        const loc = path.join(\n            this.dir, this.name, storage + '.cargo'\n        )\n\n        // Validate if given name is correct\n        if (!help.validateName(storage)) {\n            throw `\n                Given name '${storage}' does not apply \n                to proper key name pattern\n                (RegExp: /^[A-Za-z0-9@$\\-#%&_()\\[\\]{}]+$/)\n            `\n        }\n\n        // If not exists then return undefined\n        if (fs.existsSync(loc)) {\n            try {\n                // Try to parse JSON inside of the file\n                let objectContainer = JSON.parse(fs.readFileSync(loc, 'utf-8'))\n                return objectContainer[storage]\n            }\n            // if the data is corrupted\n            catch (err) {\n                // Location to the rusty cargo file\n                const rusty = path.join(\n                    this.dir, this.name, storage + '.rusty.cargo'\n                )\n                // If there is rusty cargo handler\n                // notify user otherwise\n                this.rusty(path.join(this.dir, this.name, storage))\n                // Do the rename\n                fs.renameSync(loc, rusty)\n                return null\n            }\n        }\n        return null\n    }\n\n\n    // Get a collection (any)\n    // name : String\n    public in(name: string): Collection {\n        // Location to the collection dir\n        const loc = path.join(this.dir, this.name, name)\n\n        // Validate if given name is correct\n        if (!help.validateName(name)) {\n            throw `\n                Given name '${name}' does not apply \n                to proper key name pattern\n                (RegExp: /^[A-Za-z0-9@$\\-#%&_()\\[\\]{}]+$/)\n            `\n        }\n\n        if (this.schemas[name] == null) {\n            throw `\n                There is no collection with name: '${name}'\n                If this name is not a mistake,\n                create one with cargo.create()\n                (More info in docs)\n            `\n        }\n\n        return new Collection(loc, name, this.rusty, this.schemas[name])\n    }\n\n    // Create a collection\n    // Possibly with a schema\n    public create (\n        name: string, \n        schema: (\n            data: (value: string) => SchemaTag, \n            cache: (value: string) => SchemaTag, \n            ref: (value: string) => SchemaTag\n        ) => void | null\n    ) {\n        // Location to the collection dir\n        const loc = path.join(this.dir, this.name, name)\n        // Create dir if not exists\n        if (!fs.existsSync(loc)) {\n            fs.mkdirSync(loc)\n        }\n        // Create generic schema if nothing provided\n        if (schema == null) this.schemas[name] = 'no-schema'\n    }\n}\n\n\n// Async wrapper \n// for Cargo database.\n// Don't write any logic here\n// async wrapper's purpose is to\n// handle the code that needs to\n// be done asynchronously\n\nclass CargoAsync extends Cargo {\n    // Cargo constructor\n    constructor(name: string, path: string) {\n        super(name, path)\n    }\n\n    // Expose methods in a \n    // simple to use API\n\n    // Create a synchronous version of Cargo.\n    // Warning: possible collisions may occur\n    static Sync(name: string, path: string): Cargo {\n        return new Cargo(name, path)\n    }\n\n    // [Async] This method is used \n    // to set cargo to any value.\n    // The item can be any type.\n    public set(storage: string, item: any) {\n        return super.async('setCargo', [storage, item])\n    }\n\n    // [Sync] This method is used to \n    // retrieve data from a cargo.\n    // Returned null value means\n    // the cargo doesn't exist\n    public get(storage: string) {\n        return super.getCargo(storage)\n    }\n}\n\nexport default CargoAsync\nmodule.exports = CargoAsync"]}